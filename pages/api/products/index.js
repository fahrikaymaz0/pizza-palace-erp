import { prisma, ensurePrismaSchema } from '../../../lib/prisma';export default async function handler(req, res) {  // CORS headers  res.setHeader('Access-Control-Allow-Origin', '*');  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Handle OPTIONS request  if (req.method === 'OPTIONS') {    res.status(200).end();    return;  }  // Only allow GET method  if (req.method !== 'GET') {    return res.status(405).json({ error: 'Method not allowed' });  }  try {    // Database schema'yƒ± kontrol et    await ensurePrismaSchema();        const { category, search, sortBy } = req.query;    // Mock √ºr√ºnler (database baƒülantƒ± sorunu varsa)    const mockProducts = [      {        id: '1',        name: 'Royal Margherita',        description: 'Kraliyet domates sosu, mozzarella di bufala, taze fesleƒüen',        price: 89,        originalPrice: 120,        image: '/pizzas/margherita.png',        category: 'royal',        rating: 4.9,        reviewCount: 256,        isPremium: true,        isVegetarian: true,        ingredients: ['Domates Sosu', 'Mozzarella', 'Fesleƒüen', 'Zeytinyaƒüƒ±'],        preparationTime: '15-20 dk',        calories: 850,        badge: 'üëë Kraliyet'      },      {        id: '2',        name: 'Imperial Pepperoni',        description: '√ñzel pepperoni, mozzarella, parmesan peyniri',        price: 99,        image: '/pizzas/pepperoni.png',        category: 'imperial',        rating: 4.8,        reviewCount: 189,        isPremium: true,        ingredients: ['Pepperoni', 'Mozzarella', 'Parmesan', 'Domates Sosu'],        preparationTime: '18-22 dk',        calories: 950,        badge: '‚öîÔ∏è ƒ∞mparatorluk'      },      {        id: '3',        name: 'Supreme Majesty',        description: 'Kraliyet malzemeleri: sosis, mantar, biber, soƒüan, zeytin',        price: 129,        image: '/pizzas/supreme.png',        category: 'supreme',        rating: 5.0,        reviewCount: 312,        isPremium: true,        ingredients: ['Sosis', 'Mantar', 'Biber', 'Soƒüan', 'Zeytin'],        preparationTime: '20-25 dk',        calories: 1100,        badge: 'üëë Majeste'      },      {        id: '4',        name: 'Royal Vegetarian',        description: 'Taze sebzeler, mozzarella, parmesan, fesleƒüen',        price: 79,        image: '/pizzas/vegetarian.png',        category: 'royal',        rating: 4.7,        reviewCount: 145,        isVegetarian: true,        ingredients: ['Mantar', 'Biber', 'Soƒüan', 'Mozzarella', 'Fesleƒüen'],        preparationTime: '15-18 dk',        calories: 750,        badge: 'üåø Kraliyet'      },      {        id: '5',        name: 'BBQ Royal Chicken',        description: 'BBQ sosu, tavuk g√∂ƒüs√º, soƒüan, mƒ±sƒ±r, mozzarella',        price: 109,        image: '/pizzas/bbq-chicken.png',        category: 'bbq',        rating: 4.6,        reviewCount: 98,        ingredients: ['Tavuk G√∂ƒüs√º', 'BBQ Sosu', 'Soƒüan', 'Mƒ±sƒ±r', 'Mozzarella'],        preparationTime: '18-22 dk',        calories: 980,        badge: 'üçó Kraliyet'      },      {        id: '6',        name: 'Mexican Fire',        description: 'Acƒ±lƒ± sos, jalape√±o, mƒ±sƒ±r, tavuk, mozzarella',        price: 119,        image: '/pizzas/mexican-hot.png',        category: 'spicy',        rating: 4.5,        reviewCount: 87,        isSpicy: true,        ingredients: ['Acƒ±lƒ± Sos', 'Jalape√±o', 'Mƒ±sƒ±r', 'Tavuk', 'Mozzarella'],        preparationTime: '16-20 dk',        calories: 920,        badge: 'üî• Ate≈ü'      }    ];    // Database'den √ºr√ºnleri √ßekmeyi dene    let dbProducts = [];    try {      dbProducts = await prisma.product.findMany({         orderBy: { name: 'asc' }       });    } catch (dbError) {      console.log('Database √ºr√ºn √ßekme hatasƒ±, mock kullanƒ±lƒ±yor:', dbError.message);    }    let filteredProducts = dbProducts.length > 0 ? dbProducts : mockProducts;    // Category filter    if (category && category !== 'all') {      filteredProducts = filteredProducts.filter(product => product.category === category);    }    // Search filter    if (search) {      const searchLower = search.toLowerCase();      filteredProducts = filteredProducts.filter(product =>         product.name.toLowerCase().includes(searchLower) ||        product.description.toLowerCase().includes(searchLower)      );    }    // Sort options    switch (sortBy) {      case 'price-low':        filteredProducts.sort((a, b) => a.price - b.price);        break;      case 'price-high':        filteredProducts.sort((a, b) => b.price - a.price);        break;      case 'rating':        filteredProducts.sort((a, b) => b.rating - a.rating);        break;      case 'name':      default:        filteredProducts.sort((a, b) => a.name.localeCompare(b.name));        break;    }    return res.status(200).json({      success: true,      products: filteredProducts,      count: filteredProducts.length    });  } catch (error) {    console.error('Products API Error:', error);    return res.status(500).json({      success: false,      message: '√úr√ºnler y√ºklenirken bir hata olu≈ütu',      detail: error.message    });  }}