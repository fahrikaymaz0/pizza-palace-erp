import { prisma, ensurePrismaSchema, ensureUserLastLoginColumn } from '../../../lib/prisma';import bcrypt from 'bcryptjs';import { generateToken } from '../../../lib/auth';export default async function handler(req, res) {  // CORS headers - more comprehensive  res.setHeader('Access-Control-Allow-Origin', '*');  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');  res.setHeader('Access-Control-Max-Age', '86400');  // Handle preflight  if (req.method === 'OPTIONS') {    res.status(200).end();    return;  }  // Only allow POST method  if (req.method !== 'POST') {    return res.status(405).json({       success: false,      message: 'Method not allowed',      allowedMethods: ['POST']    });  }  try {    await ensurePrismaSchema();    await ensureUserLastLoginColumn();        const { email, password } = req.body || {};    const normalizedEmail = String(email || '').trim().toLowerCase();    console.log('Admin login attempt:', { email: normalizedEmail });    // Validasyon    if (!normalizedEmail || !password) {      return res.status(400).json({        success: false,        message: 'E-posta ve şifre gereklidir'      });    }    // Admin kullanıcısını bul    const admin = await prisma.user.findFirst({       where: { email: normalizedEmail },      select: {        id: true,        firstName: true,        lastName: true,        email: true,        password: true,        role: true,        emailVerified: true      }    });    if (!admin) {      return res.status(401).json({        success: false,        message: 'Geçersiz e-posta veya şifre'      });    }    // Email doğrulaması kontrolü    if (!admin.emailVerified) {      return res.status(403).json({        success: false,        message: 'E-posta doğrulanmadı. Lütfen e-postanızdaki kodu onaylayın.'      });    }    // Şifre kontrolü    const isPasswordValid = await bcrypt.compare(password, admin.password);    if (!isPasswordValid) {      return res.status(401).json({        success: false,        message: 'Geçersiz e-posta veya şifre'      });    }    // Admin kontrolü: role alanını küçük harfe çevirerek kontrol et    const userRole = String(admin.role || '').toLowerCase();    if (userRole !== 'admin') {      return res.status(403).json({        success: false,        message: 'Bu alana erişim yetkiniz yok',        detail: `role=${admin.role}, normalized=${userRole}`      });    }    // Uygulama geneliyle aynı JWT imzasını kullan    const token = generateToken(admin);    // Son giriş zamanını güncelle    await prisma.user.update({      where: { id: admin.id },      data: { lastLogin: new Date() }    });    // AppSetting'e son admin emailini kaydet    await prisma.$executeRawUnsafe(`INSERT INTO "AppSetting" ("key","value") VALUES ('lastAdminEmail', ?) ON CONFLICT(key) DO UPDATE SET value=excluded.value`, normalizedEmail);    console.log('Admin logged in successfully:', admin.id);    res.status(200).json({      success: true,      message: 'Admin girişi başarılı',      data: {        id: admin.id,        firstName: admin.firstName,        lastName: admin.lastName,        email: admin.email,        role: admin.role,        token      }    });  } catch (error) {    console.error('Admin giriş hatası:', error?.message || error);    res.status(500).json({      success: false,      message: 'Giriş yapılırken bir hata oluştu',      detail: error?.message || String(error)    });  }} 