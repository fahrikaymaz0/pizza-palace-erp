import { prisma, ensurePrismaSchema } from '../../../lib/prisma';import { generateToken } from '../../../lib/auth';import jwt from 'jsonwebtoken';export default async function handler(req, res) {  // CORS headers  res.setHeader('Access-Control-Allow-Origin', '*');  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Handle OPTIONS request  if (req.method === 'OPTIONS') {    res.status(200).end();    return;  }  // Only allow POST method  if (req.method !== 'POST') {    return res.status(405).json({ error: 'Method not allowed' });  }  try {    await ensurePrismaSchema();    const { email, code, token: verificationToken } = req.body || {};    const normalizedEmail = email ? String(email).trim().toLowerCase() : null;    // 1) Token ile doğrulama (e-posta linkinden)    if (verificationToken) {      try {        const secret = process.env.JWT_SECRET || 'fallback-secret';        const payload = jwt.verify(verificationToken, secret);        const tokenEmail = payload.email;        if (!tokenEmail) {          return res.status(400).json({ success: false, message: 'Geçersiz doğrulama tokenı' });        }        const userByToken = await prisma.user.findUnique({ where: { email: String(tokenEmail).toLowerCase() } });        if (!userByToken) {          return res.status(404).json({ success: false, message: 'Kullanıcı bulunamadı' });        }        if (userByToken.emailVerified) {          const loginToken = generateToken(userByToken);          return res.status(200).json({ success: true, message: 'E-posta zaten doğrulanmış', user: {            id: userByToken.id,            firstName: userByToken.firstName,            lastName: userByToken.lastName,            email: userByToken.email,            phone: userByToken.phone,            address: userByToken.address,            role: userByToken.role,            emailVerified: true          }, token: loginToken });        }        const updatedViaToken = await prisma.user.update({          where: { id: userByToken.id },          data: { emailVerified: true, verificationCode: null },          select: { id: true, firstName: true, lastName: true, email: true, phone: true, address: true, role: true, emailVerified: true }        });        const loginToken = generateToken(updatedViaToken);        return res.status(200).json({ success: true, message: 'E-posta başarıyla doğrulandı', user: updatedViaToken, token: loginToken });      } catch {        return res.status(400).json({ success: false, message: 'Doğrulama tokenı geçersiz veya süresi dolmuş' });      }    }    // 2) E-posta + kod ile doğrulama (kayıt modali)    if (!normalizedEmail || !code) {      return res.status(400).json({ success: false, message: 'E-posta ve doğrulama kodu gereklidir' });    }    const user = await prisma.user.findUnique({ where: { email: normalizedEmail } });    if (!user) {      return res.status(404).json({ success: false, message: 'Kullanıcı bulunamadı' });    }    if (user.emailVerified) {      return res.status(400).json({ success: false, message: 'E-posta zaten doğrulanmış' });    }    if (user.verificationCode !== code) {      return res.status(400).json({ success: false, message: 'Geçersiz doğrulama kodu' });    }    const updatedUser = await prisma.user.update({      where: { id: user.id },      data: { emailVerified: true, verificationCode: null },      select: { id: true, firstName: true, lastName: true, email: true, phone: true, address: true, role: true, emailVerified: true }    });    const loginToken = generateToken(updatedUser);    return res.status(200).json({ success: true, message: 'E-posta başarıyla doğrulandı', user: updatedUser, token: loginToken });  } catch (error) {    console.error('Email verification API Error:', error);    return res.status(500).json({      success: false,      message: 'Doğrulama sırasında bir hata oluştu'    });  }}